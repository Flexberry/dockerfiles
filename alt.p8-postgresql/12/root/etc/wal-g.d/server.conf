#!/bin/sh

WALG_VARS="$WALG_VARS
PGDATA
PGHOST
TOTAL_BG_UPLOADED_LIMIT
WALG_SENTINEL_USER_DATA
WALG_PREVENT_WAL_OVERWRITE
WALG_DELTA_ORIGIN
WALG_TAR_SIZE_THRESHOLD
OPLOG_ARCHIVE_TIMEOUT
OPLOG_ARCHIVE_AFTER_SIZE
WALG_UPLOAD_CONCURRENCY
WALG_DOWNLOAD_CONCURRENCY
WALG_UPLOAD_DISK_CONCURRENCY
WALG_DELTA_MAX_STEPS
WALG_COMPRESSION_METHOD
"

export PGDATA=/var/lib/pgsql/data/

export PGHOST=/tmp/.s.PGSQL.5432

if [ -z "$TOTAL_BG_UPLOADED_LIMIT" ]
then
  export TOTAL_BG_UPLOADED_LIMIT=1024
fi
if [ -z "$WALG_SENTINEL_USER_DATA" ]
then
  export WALG_SENTINEL_USER_DATA=
fi
if [ -z "$WALG_PREVENT_WAL_OVERWRITE" ]
then
  export WALG_PREVENT_WAL_OVERWRITE=1
fi
if [ -z "$WALG_DELTA_ORIGIN" ]
then
  export WALG_DELTA_ORIGIN=LATEST
fi
if [ -z "$WALG_TAR_SIZE_THRESHOLD" ]
then
  export WALG_TAR_SIZE_THRESHOLD=109051904
fi
if [ -z "$OPLOG_ARCHIVE_TIMEOUT" ]
then
  export OPLOG_ARCHIVE_TIMEOUT=60
fi
if [ -z "$OPLOG_ARCHIVE_AFTER_SIZE" ]
then
  export OPLOG_ARCHIVE_AFTER_SIZE=33554432
fi

if [ -z "$WALG_UPLOAD_CONCURRENCY" ]
then
  export WALG_UPLOAD_CONCURRENCY=16
fi
if [ -z "$WALG_DOWNLOAD_CONCURRENCY" ]
then
  export WALG_DOWNLOAD_CONCURRENCY=10
fi
if [ -z "$WALG_UPLOAD_DISK_CONCURRENCY" ]
then
  export WALG_UPLOAD_DISK_CONCURRENCY=1
fi
if [ -z "$WALG_DELTA_MAX_STEPS" ]
then
  export WALG_DELTA_MAX_STEPS=7
fi
if [ -z "$WALG_COMPRESSION_METHOD" ]
then
  export WALG_COMPRESSION_METHOD=brotli
fi




